{"version":3,"sources":["components/Text/style.js","components/Text/Text.js","components/Spinner/Spinner.js","components/CheckBox/style.js","components/CheckBox/CheckBox.js","components/UserList/style.js","components/CheckBox/CountriesCheckBoxes.js","components/UserList/UserItem.js","components/UserList/UserList.js","Utils/favoritesUsers.js","pages/Home/style.js","pages/Home/Home.js","hooks/usePeopleFetch.js","pages/Favorites/Favorites.js","theme/ThemeProvider.js","components/NavBar/NavBar.js","AppRouter.js","index.js"],"names":["Text","styled","div","size","bold","children","Typography","Spinner","color","thickness","variant","CircularProgress","CheckBox","isChecked","onChange","label","value","FormControlLabel","control","Checkbox","checked","UserList","List","User","UserInfo","UserPicture","img","SpinnerWrapper","IconButtonWrapper","isVisible","Filters","countriesList","id","name","CountryCheckBoxes","filterByCountry","useState","checkedCountries","setCheckedCountries","map","country","index","countryName","countryIndex","indexOf","newCheckedCountries","push","splice","handleChange","UserItem","user","isLast","isLoading","isFavorite","toggleFavorite","setPageNumber","hoveredUserId","setHoveredUserId","observer","useRef","lastUserItemRef","useCallback","userItem","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPageNumber","observe","ref","onMouseEnter","handleMouseEnter","onMouseLeave","src","picture","large","alt","title","first","last","email","location","street","number","city","onClick","IconButton","users","favorites","filteredUsers","setFilteredUsers","countryFilterIsActive","setCountryFilterIsActive","createUserItem","findIndex","userIter","login","uuid","CountriesCheckBoxes","length","filter","includes","RemoveUserDataFromFavorites","userData","favoritesUsersData","JSON","parse","localStorage","getItem","userIndex","setItem","stringify","getFavoritesUsersData","localStorageFavoritesData","Home","Content","Header","setFavorites","pageNumber","setUsers","setIsLoading","a","axios","get","response","prevUsers","data","results","fetchUsers","usePeopleFetch","useEffect","favoritesData","initFavorites","newFavorites","newFavoritesUsersData","addUserDataToFavorites","Favorites","newFavoritesData","ThemeProvider","overrides","MuiTab","root","backgroundColor","theme","React","useMemo","createMuiTheme","palette","type","primary","main","error","CssBaseline","NavBar","setValue","AppBar","position","style","top","Tabs","_e","newValue","aria-label","indicatorColor","textColor","Tab","to","component","Link","AppRouter","exact","path","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.1a44d44d.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Text = styled.div`\r\n  font-size: ${({ size }) => size};\r\n  font-weight: ${({ bold }) => (bold ? \"700\" : \"400\")};\r\n`;\r\n","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport * as S from \"./style\";\r\n\r\nconst Text = ({ size = \"14px\", children, bold }) => {\r\n  return (\r\n    <Typography>\r\n      <S.Text size={size} bold={bold}>\r\n        {children}\r\n      </S.Text>\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default Text;\r\n","import React from \"react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst Spinner = ({ size, color, thickness, variant }) => {\r\n  return (\r\n    <CircularProgress size={size} color={color} thickness={thickness} variant={variant} />\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import styled from \"styled-components\";\r\n\r\nexport const CheckBox = styled.div``;\r\n\r\n// added the filter style to the checkbox style js in order to have a group of checkboxes together\r\nexport const Filters = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    & > * {\r\n        margin-inline-end: 8px;\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport * as S from \"./style\";\r\n\r\nconst CheckBox = ({ isChecked, onChange, label, value }) => {\r\n    const handleChange = () => {\r\n        onChange && onChange(value);\r\n    };\r\n\r\n    return (\r\n        <S.CheckBox>\r\n            <FormControlLabel\r\n                control={\r\n                    <Checkbox\r\n                        checked={isChecked}\r\n                        onChange={handleChange}\r\n                        color=\"primary\"\r\n                    />\r\n                }\r\n                label={label}\r\n            />\r\n        </S.CheckBox>\r\n    );\r\n};\r\n\r\nexport default CheckBox;\r\n","import styled from \"styled-components\";\r\n\r\nexport const UserList = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const List = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 35px;\r\n  width: 500px;\r\n  height: calc(100vh - 270px);\r\n  margin-block-start: 30px;\r\n  overflow-y: auto;\r\n`;\r\n\r\nexport const User = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 16px;\r\n`;\r\n\r\nexport const UserInfo = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  width: 100%;\r\n  max-height: 128px;\r\n  gap: 2px;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const UserPicture = styled.img`\r\n  border-radius: 45%;\r\n`;\r\n\r\nexport const SpinnerWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  opacity: ${({ isVisible }) => (isVisible ? 1 : 0)};\r\n  transition: opacity 0.2s ease-in-out;\r\n`;\r\n\r\nexport const Filters = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  & > * {\r\n    margin-inline-end: 8px;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport CheckBox from \"./CheckBox\";\r\nimport * as S from \"../UserList/style\";\r\n\r\n// A list of the countries that will have a checkbox filter (to add a new country filter add it to the list)\r\nconst countriesList = [\r\n    { id: \"BR\", name: \"Brazil\" },\r\n    { id: \"AU\", name: \"Australia\" },\r\n    { id: \"CA\", name: \"Canada\" },\r\n    { id: \"DE\", name: \"Germany\" },\r\n    { id: \"CH\", name: \"Switzerland\" },\r\n];\r\n\r\nconst CountryCheckBoxes = ({ filterByCountry }) => {\r\n    // this state will hold a list of ids of the checked countries\r\n    const [checkedCountries, setCheckedCountries] = useState([]);\r\n\r\n    // Toggle the selected party from the checkedCountries list state (using country name)\r\n    const handleChange = (countryName) => {\r\n        const countryIndex = checkedCountries.indexOf(countryName);\r\n        const newCheckedCountries = [...checkedCountries];\r\n\r\n        // if the country is not in the checked list - enter it\r\n        if (countryIndex === -1) {\r\n            newCheckedCountries.push(countryName);\r\n        }\r\n        // else - remove it from the checked list (it was un-checked)\r\n        else {\r\n            newCheckedCountries.splice(countryIndex, 1);\r\n        }\r\n\r\n        setCheckedCountries(newCheckedCountries);\r\n        filterByCountry(newCheckedCountries);\r\n    };\r\n\r\n    return (\r\n        <S.Filters>\r\n            {countriesList.map((country, index) => (\r\n                <CheckBox\r\n                    key={index}\r\n                    value={country.id}\r\n                    label={country.name}\r\n                    onChange={() => handleChange(country.name)}\r\n                    isChecked={\r\n                        checkedCountries.indexOf(country.name) === -1 ? false : true\r\n                    }\r\n                />\r\n            ))}\r\n        </S.Filters>\r\n    );\r\n};\r\n\r\nexport default CountryCheckBoxes;\r\n","import React, { useState, useRef, useCallback } from \"react\";\r\nimport Text from \"components/Text\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport * as S from \"./style\";\r\n\r\nconst UserItem = ({\r\n    index,\r\n    user,\r\n    isLast,\r\n    isLoading,\r\n    isFavorite,\r\n    toggleFavorite,\r\n    setPageNumber,\r\n}) => {\r\n    const [hoveredUserId, setHoveredUserId] = useState();\r\n\r\n    const handleMouseEnter = (index) => {\r\n        setHoveredUserId(index);\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setHoveredUserId();\r\n    };\r\n\r\n    // this ref and callback will observe the last userItem, when the last userItem will be rendered to the screen\r\n    // the callback function will be called and will fetch a new page with new users\r\n    const observer = useRef();\r\n    const lastUserItemRef = useCallback(\r\n        (userItem) => {\r\n            if (isLoading) return;\r\n\r\n            if (observer.current) observer.current.disconnect();\r\n\r\n            observer.current = new IntersectionObserver((entries) => {\r\n                if (entries[0].isIntersecting) {\r\n                    setPageNumber((prevPageNumber) => prevPageNumber + 1);\r\n                }\r\n            });\r\n\r\n            if (userItem) observer.current.observe(userItem);\r\n        },\r\n        [isLoading]\r\n    );\r\n\r\n    return (\r\n        <S.User\r\n            key={index}\r\n            ref={isLast ? lastUserItemRef : null}\r\n            onMouseEnter={() => handleMouseEnter(index)}\r\n            onMouseLeave={handleMouseLeave}\r\n        >\r\n            <S.UserPicture src={user?.picture.large} alt=\"\" />\r\n            <S.UserInfo>\r\n                <Text size=\"22px\" bold>\r\n                    {user?.name.title} {user?.name.first} {user?.name.last}\r\n                </Text>\r\n                <Text size=\"14px\">{user?.email}</Text>\r\n                <Text size=\"14px\">\r\n                    {user?.location.street.number} {user?.location.street.name}\r\n                </Text>\r\n                <Text size=\"14px\">\r\n                    {user?.location.city} {user?.location.country}\r\n                </Text>\r\n            </S.UserInfo>\r\n            <S.IconButtonWrapper\r\n                isVisible={index === hoveredUserId || isFavorite}\r\n                onClick={() => {\r\n                    toggleFavorite(user);\r\n                }}\r\n            >\r\n                <IconButton>\r\n                    <FavoriteIcon color=\"error\" />\r\n                </IconButton>\r\n            </S.IconButtonWrapper>\r\n        </S.User>\r\n    );\r\n};\r\n\r\nexport default UserItem;\r\n","import React, { useState } from \"react\";\r\nimport Spinner from \"components/Spinner\";\r\nimport CountriesCheckBoxes from \"../CheckBox/CountriesCheckBoxes\";\r\nimport UserItem from \"./UserItem\";\r\nimport * as S from \"./style\";\r\n\r\nconst UserList = ({ users, isLoading, favorites, toggleFavorite, setPageNumber }) => {\r\n    // this state will hold a list of the filtered users\r\n    const [filteredUsers, setFilteredUsers] = useState([]);\r\n    // this state will hold a flag indicating the country filter status - true/false\r\n    const [countryFilterIsActive, setCountryFilterIsActive] = useState(false);\r\n\r\n    // Filter users by country - update the filteredUsers state and the countryFilterIsActive state\r\n    const filterByCountry = (checkedCountries) => {\r\n        if (checkedCountries.length === 0) {\r\n            setFilteredUsers([]);\r\n            setCountryFilterIsActive(false);\r\n        } else {\r\n            setFilteredUsers(\r\n                users.filter((user) => checkedCountries.includes(user.location.country))\r\n            );\r\n            setCountryFilterIsActive(true);\r\n        }\r\n    };\r\n\r\n    // Create a new User Item with the index and user data we got as params\r\n    const createUserItem = (index, user, isLast = false) => (\r\n        <UserItem\r\n            key={index}\r\n            index={index}\r\n            user={user}\r\n            isLast={isLast}\r\n            isLoading={isLoading}\r\n            isFavorite={\r\n                favorites.findIndex(\r\n                    (userIter) => user.login.uuid === userIter.login.uuid\r\n                ) === -1\r\n                    ? false\r\n                    : true\r\n            }\r\n            toggleFavorite={toggleFavorite}\r\n            setPageNumber={setPageNumber}\r\n        />\r\n    );\r\n\r\n    return (\r\n        <S.UserList>\r\n            <CountriesCheckBoxes filterByCountry={filterByCountry} />\r\n\r\n            <S.List>\r\n                {countryFilterIsActive\r\n                    ? filteredUsers.map((user, index) => createUserItem(index, user))\r\n                    : users.map((user, index) =>\r\n                          index + 1 === users.length\r\n                              ? createUserItem(index, user, true)\r\n                              : createUserItem(index, user)\r\n                      )}\r\n\r\n                {isLoading && (\r\n                    <S.SpinnerWrapper>\r\n                        <Spinner\r\n                            color=\"primary\"\r\n                            size=\"45px\"\r\n                            thickness={6}\r\n                            variant=\"indeterminate\"\r\n                        />\r\n                    </S.SpinnerWrapper>\r\n                )}\r\n            </S.List>\r\n        </S.UserList>\r\n    );\r\n};\r\n\r\nexport default UserList;\r\n","// Add a user's data to the favorites users data local storage data and return the new data\r\nexport const addUserDataToFavorites = (userData) => {\r\n    // get the favorites users data from the local storage\r\n    const favoritesUsersData = JSON.parse(localStorage.getItem(\"favoritesUsersData\"));\r\n\r\n    // insert the new user to the data\r\n    const newFavoritesUsersData = favoritesUsersData ? [...favoritesUsersData] : [];\r\n    newFavoritesUsersData.push(userData);\r\n\r\n    // update the local storage\r\n    localStorage.setItem(\"favoritesUsersData\", JSON.stringify(newFavoritesUsersData));\r\n\r\n    return newFavoritesUsersData;\r\n};\r\n\r\n// Remove a user's data from the favorites users data local storage data and return the new data\r\nexport const RemoveUserDataFromFavorites = (userData) => {\r\n    // get the favorites users data from the local storage\r\n    const favoritesUsersData = JSON.parse(localStorage.getItem(\"favoritesUsersData\"));\r\n\r\n    if (!favoritesUsersData) return [];\r\n\r\n    // find the user's index\r\n    const userIndex = favoritesUsersData.findIndex(\r\n        (user) => user.login.uuid === userData.login.uuid\r\n    );\r\n    if (userIndex === -1) return favoritesUsersData;\r\n\r\n    // remove the user from the data\r\n    favoritesUsersData.splice(userIndex, 1);\r\n\r\n    // update the local storage\r\n    localStorage.setItem(\"favoritesUsersData\", JSON.stringify(favoritesUsersData));\r\n\r\n    return favoritesUsersData;\r\n};\r\n\r\n// return the favorite users data from local storage\r\nexport const getFavoritesUsersData = () => {\r\n    const localStorageFavoritesData = JSON.parse(\r\n        localStorage.getItem(\"favoritesUsersData\")\r\n    );\r\n    return localStorageFavoritesData ? localStorageFavoritesData : [];\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Home = styled.div`\r\n  display: flex;\r\n  height: 100vh;\r\n  align-items: center;\r\n  justify-content: center;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  padding-block-start: 100px;\r\n`;\r\n\r\nexport const Header = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport const Form = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 25px;\r\n  max-width: 400px;\r\n  width: 100%;\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Text from \"components/Text\";\r\nimport UserList from \"components/UserList\";\r\nimport {\r\n    getFavoritesUsersData,\r\n    addUserDataToFavorites,\r\n    RemoveUserDataFromFavorites,\r\n} from \"../../Utils/favoritesUsers\";\r\nimport { usePeopleFetch } from \"hooks\";\r\nimport * as S from \"./style\";\r\n\r\nconst Home = () => {\r\n    // this state will hold the favorites of the user - will be loaded and saved in localStorage\r\n    const [favorites, setFavorites] = useState([]);\r\n\r\n    // this state will hold the current page number that we recently loaded\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n\r\n    const { users, isLoading, fetchUsers } = usePeopleFetch();\r\n\r\n    // init the favorite data from local storage\r\n    const initFavorites = () => {\r\n        const favoritesData = getFavoritesUsersData();\r\n        setFavorites(favoritesData);\r\n    };\r\n\r\n    // init the favorite data on start\r\n    useEffect(() => {\r\n        initFavorites();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    // if the pageNumber state got changed fetch new users\r\n    useEffect(() => {\r\n        fetchUsers(pageNumber);\r\n        // eslint-disable-next-line\r\n    }, [pageNumber]);\r\n\r\n    // Toggle a favorite user, update the favorite state and the localStorage\r\n    const toggleFavorite = (userData) => {\r\n        // find the user's index\r\n        const userIndex = favorites.findIndex(\r\n            (user) => user.login.uuid === userData.login.uuid\r\n        );\r\n\r\n        let newFavorites;\r\n\r\n        // if the user is not in the favorites list - enter it to the local storage\r\n        if (userIndex === -1) {\r\n            newFavorites = addUserDataToFavorites(userData);\r\n        }\r\n        // else - remove it from the local storage\r\n        else {\r\n            newFavorites = RemoveUserDataFromFavorites(userData);\r\n        }\r\n\r\n        // update the state\r\n        setFavorites(newFavorites);\r\n    };\r\n\r\n    return (\r\n        <S.Home>\r\n            <S.Content>\r\n                <S.Header>\r\n                    <Text size=\"64px\" bold>\r\n                        PplFinder\r\n                    </Text>\r\n                </S.Header>\r\n                <UserList\r\n                    users={users}\r\n                    isLoading={isLoading}\r\n                    favorites={favorites}\r\n                    toggleFavorite={toggleFavorite}\r\n                    setPageNumber={setPageNumber}\r\n                />\r\n            </S.Content>\r\n        </S.Home>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const usePeopleFetch = () => {\r\n    const [users, setUsers] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    async function fetchUsers(pageNumber) {\r\n        setIsLoading(true);\r\n\r\n        const response = await axios.get(\r\n            `https://randomuser.me/api/?results=6&page=${pageNumber}`\r\n        );\r\n\r\n        setIsLoading(false);\r\n        setUsers((prevUsers) => [...prevUsers, ...response.data.results]);\r\n    }\r\n\r\n    return { users, isLoading, fetchUsers };\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Text from \"components/Text\";\r\nimport UserList from \"components/UserList\";\r\nimport {\r\n    RemoveUserDataFromFavorites,\r\n    getFavoritesUsersData,\r\n} from \"../../Utils/favoritesUsers\";\r\nimport * as S from \"../Home/style\";\r\n\r\nconst Favorites = () => {\r\n    // this state will hold the favorites users data of the user - will be loaded and saved in localStorage\r\n    const [favorites, setFavorites] = useState([]);\r\n\r\n    const initFavorites = () => {\r\n        const favoritesData = getFavoritesUsersData();\r\n        setFavorites(favoritesData);\r\n    };\r\n\r\n    // init the favorite data on start\r\n    useEffect(() => {\r\n        initFavorites();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const removeFromFavorites = (userData) => {\r\n        const newFavoritesData = RemoveUserDataFromFavorites(userData);\r\n        setFavorites(newFavoritesData);\r\n    };\r\n\r\n    return (\r\n        <S.Home>\r\n            <S.Content>\r\n                <S.Header>\r\n                    <Text size=\"64px\" bold>\r\n                        PplFinder - Favorites\r\n                    </Text>\r\n                </S.Header>\r\n                <UserList\r\n                    users={favorites}\r\n                    isLoading={false}\r\n                    favorites={favorites}\r\n                    toggleFavorite={removeFromFavorites}\r\n                    setPageNumber={() => null}\r\n                />\r\n            </S.Content>\r\n        </S.Home>\r\n    );\r\n};\r\n\r\nexport default Favorites;\r\n","import React from \"react\";\r\nimport { createMuiTheme, ThemeProvider as Provider } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\nconst ThemeProvider = ({ children }) => {\r\n  const overrides = {\r\n    MuiTab: {\r\n      root: {\r\n        backgroundColor: \"#303030\",\r\n      },\r\n    },\r\n  };\r\n  const theme = React.useMemo(\r\n    () =>\r\n      createMuiTheme({\r\n        overrides,\r\n        palette: {\r\n          type: \"dark\",\r\n          primary: {\r\n            main: \"#84ffff\",\r\n          },\r\n          error: {\r\n            main: \"#f06292\",\r\n          },\r\n        },\r\n      }),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <Provider theme={theme}>\r\n      <CssBaseline />\r\n      {children}\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default ThemeProvider;\r\n","import React, { useState } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n    const [value, setValue] = useState(0);\r\n\r\n    const handleChange = (_e, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <AppBar\r\n            position=\"static\"\r\n            color=\"transparent\"\r\n            style={{ position: \"fixed\", top: 0 }}\r\n        >\r\n            <Tabs\r\n                value={value}\r\n                onChange={handleChange}\r\n                aria-label=\"Navigation\"\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n            >\r\n                <Tab label=\"Home\" index={0} to=\"/\" component={Link} />\r\n                <Tab label=\"Favorites\" index={1} to=\"/favorites\" component={Link} />\r\n            </Tabs>\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Home } from \"pages\";\r\nimport Favorites from \"./pages/Favorites/Favorites\";\r\nimport { ThemeProvider } from \"theme\";\r\nimport NavBar from \"components/NavBar\";\r\n\r\nconst AppRouter = () => {\r\n    return (\r\n        <ThemeProvider>\r\n            <Router>\r\n                <NavBar />\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={Home} />\r\n                    <Route exact path=\"/favorites\" component={Favorites} />\r\n                </Switch>\r\n            </Router>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport AppRouter from \"AppRouter\";\r\n\r\nReactDOM.render(<AppRouter />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}